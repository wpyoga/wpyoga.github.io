"use strict";(self.webpackChunkwpyoga_docusaurus_blog=self.webpackChunkwpyoga_docusaurus_blog||[]).push([[7761],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return k}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),k=a,h=c["".concat(s,".").concat(k)]||c[k]||p[k]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3362:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},assets:function(){return d},toc:function(){return p},default:function(){return k}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],l={title:"Libvirt Networking Configuration",tags:["libvirt","networking","bridged","routed","nat","dmz"]},s=void 0,u={permalink:"/blog/2022/01/27/libvirt-networking",editUrl:"https://github.com/wpyoga/wpyoga.github.io/edit/master/blog/2022-01-27-libvirt-networking.md",source:"@site/blog/2022-01-27-libvirt-networking.md",title:"Libvirt Networking Configuration",description:"If you use a wireless adapter on your VM host, libvirt networking is complicated. We have 3 options:",date:"2022-01-27T00:00:00.000Z",formattedDate:"January 27, 2022",tags:[{label:"libvirt",permalink:"/blog/tags/libvirt"},{label:"networking",permalink:"/blog/tags/networking"},{label:"bridged",permalink:"/blog/tags/bridged"},{label:"routed",permalink:"/blog/tags/routed"},{label:"nat",permalink:"/blog/tags/nat"},{label:"dmz",permalink:"/blog/tags/dmz"}],truncated:!0,authors:[],prevItem:{title:"Show Items in Folder",permalink:"/blog/2022/02/14/show-in-folder"},nextItem:{title:"Installing Proxmox VE on Debian Bullseye",permalink:"/blog/2022/01/26/installing-proxmox-ve-on-debian-bullseye"}},d={authorsImageUrls:[]},p=[{value:"Bridged",id:"bridged",children:[],level:2},{value:"Routed",id:"routed",children:[],level:2},{value:"NAT",id:"nat",children:[],level:2},{value:"Open",id:"open",children:[{value:"Events",id:"events",children:[],level:3}],level:2}],c={toc:p};function k(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you use a wireless adapter on your VM host, libvirt networking is complicated. We have 3 options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Bridged (with parprouted)"),(0,o.kt)("li",{parentName:"ul"},"Routed"),(0,o.kt)("li",{parentName:"ul"},"NAT (the default)")),(0,o.kt)("h2",{id:"bridged"},"Bridged"),(0,o.kt)("p",null,'In this scenario, the virtual machines appear as "real" nodes in the local network. Using wired connections (Ethernet) it\'s very easy to set up. However, due to ',(0,o.kt)("a",{parentName:"p",href:"https://superuser.com/a/1009881"},"the way wireless networks work"),", bridging becomes a bit more complicated."),(0,o.kt)("p",null,"The core issue is: when a wireless client wants to send a packet to another host, it has to send 3 MAC addresses to the AP:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AP's MAC address"),(0,o.kt)("li",{parentName:"ul"},"Client's MAC address"),(0,o.kt)("li",{parentName:"ul"},"Destination MAC address")),(0,o.kt)("p",null,"Remember that in AP / Managed mode, all communication has to pass through the AP. And each client to the AP needs to fill in its own MAC address as the Source address. If the client sends a MAC address belonging to a hosted virtual machine, that MAC address does not match the authenticated client's MAC address, so the AP will reject it."),(0,o.kt)("p",null,"To solve this issue, we need to use an arp proxy. The manual way of doing this is using the ",(0,o.kt)("inlineCode",{parentName:"p"},"arp")," utility. The automatic way is using ",(0,o.kt)("inlineCode",{parentName:"p"},"parprouted"),". With an ARP proxy in place, the wireless client will send out forwarded packets with the MAC address changed to its authenticated MAC address. When packets come back, the MAC address is still the client's MAC address, but the IP address is the VM's IP address. The ARP proxy sees the destination IP address, looks it up in a table, and replaces the destination MAC address of the packet to be the destination VM's MAC address."),(0,o.kt)("h2",{id:"routed"},"Routed"),(0,o.kt)("p",null,"Routed is basically NAT, with 2 major differences:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Incoming connections are allowed and routed to the requested hosts"),(0,o.kt)("li",{parentName:"ul"},"Outgoing connections still bear their original IP address")),(0,o.kt)("p",null,"However, without a static route set up on the gateway, the VM's cannot access anything outside the local network. When it tries to do so, the gateway will be unable to return packets -- it doesn't know where to send the packets to."),(0,o.kt)("p",null,"Setting up static routes on other machines in the local network only enable communication between the nodes and the VM's."),(0,o.kt)("h2",{id:"nat"},"NAT"),(0,o.kt)("p",null,"With this set up:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Incoming connections are not allowed, unless initiated by a VM. This means nodes in the local network cannot access VM's."),(0,o.kt)("li",{parentName:"ul"},"Outgoing connections are masqueraded, so the gateway knows where to send the return packets to. This means the VM's can access the local network and everything outside the local network.")),(0,o.kt)("p",null,"To enable seamless internode communication, we need to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Allow incoming connections. This effectively makes the whole NAT subnet be a DMZ."),(0,o.kt)("li",{parentName:"ul"},"Forward connections to nested VM's within virtualized NAT networks.")),(0,o.kt)("p",null,"To allow incoming connections, we need to do two things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"remove this rule: ",(0,o.kt)("inlineCode",{parentName:"li"},"-A LIBVIRT_FWI -o virbr0 -j REJECT --reject-with icmp-port-unreachable")),(0,o.kt)("li",{parentName:"ul"},"forward connections:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"192.168.124.0/24 via 192.168.122.223"),(0,o.kt)("li",{parentName:"ul"},"192.168.125.0/24 via 192.168.122.74"),(0,o.kt)("li",{parentName:"ul"},"192.168.126.0/24 via 192.168.122.91")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<route address="192.168.124.0" prefix="24" gateway="192.168.122.223"/>\n<route address="192.168.125.0" prefix="24" gateway="192.168.122.74"/>\n<route address="192.168.126.0" prefix="24" gateway="192.168.122.91"/>\n')),(0,o.kt)("p",null,"To enable forwarding, we need to manipulate iptables rules using hooks. Be careful though, when a qemu hook is called, and a non-zero exit status is returned, all domains are destroyed."),(0,o.kt)("p",null,"If a hook script is not executable, then a log line will be printed on libvirtd's log. But domains can be started and stopped."),(0,o.kt)("h2",{id:"open"},"Open"),(0,o.kt)("p",null,'With "Open" mode, no iptables rules are set by default. We would then need to specify our own rules.'),(0,o.kt)("p",null,'TODO: Propose a "Custom" mode, so that we don\'t need to use hooks'),(0,o.kt)("h3",{id:"events"},"Events"),(0,o.kt)("p",null,"TODO: propose a multi-level tree of drop-in scripts:\nmake a sample implementation using scripts"),(0,o.kt)("p",null,"/etc/libvirtd/hooks/qemu.d/guest1/prepare/begin\n/etc/libvirtd/hooks/qemu.d/guest1/start/begin\n/etc/libvirtd/hooks/qemu.d/guest1/started/begin\n/etc/libvirtd/hooks/qemu.d/guest1/stopped/end"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://libvirt.org/hooks.html"},"https://libvirt.org/hooks.html")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"virsh net-destroy\niptables rules for the network are deleted")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/network default stopped end -\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"virsh net-start\niptables rules for the network are applied")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/network default start begin -\n/etc/libvirt/hooks/network default started begin -\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"virsh start")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/qemu ub16 prepare begin -\n/etc/libvirt/hooks/network default port-created begin -\n/etc/libvirt/hooks/qemu ub16 start begin -\n/etc/libvirt/hooks/qemu ub16 started begin -\n")),(0,o.kt)("p",null,"if a domain is started but its network is not active, the domain will fail to start"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/qemu ub16 prepare begin -\n/etc/libvirt/hooks/qemu ub16 stopped end -\n/etc/libvirt/hooks/qemu ub16 release end -\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"virsh shutdown / virsh destroy")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/qemu ub16 stopped end -\n/etc/libvirt/hooks/network default port-deleted begin -\n/etc/libvirt/hooks/qemu ub16 release end -\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"systemctl stop libvirtd\niptables rules are not touched")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/daemon - shutdown - shutdown\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"systemctl start libvirtd\niptables rules for the active networks are applied")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/daemon - start - start\n")),(0,o.kt)("p",null,'networks marked as "Autostart" are not started\ndomains that are running trigger these events'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/network default port-created begin -\n/etc/libvirt/hooks/qemu ovz6 reconnect begin -\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"systemctl restart libvirtd\nsame as stop then immediately start")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"systemctl reload libvirtd\nthe daemon hook is run before the iptables rules are applied\niptables rules for the active networks are applied"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/daemon - reload begin SIGHUP\n")),(0,o.kt)("p",null,'if some networks marked as "Autostart" are not active, then those networks are started, and triggers these events:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/etc/libvirt/hooks/network default start begin -\n/etc/libvirt/hooks/network default started begin -\n")),(0,o.kt)("p",null,"if libvirtd is running, base libvirt chains are created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"*mangle\n-A POSTROUTING -j LIBVIRT_PRT\n*nat\n-A POSTROUTING -j LIBVIRT_PRT\n*filter\n-A INPUT -j LIBVIRT_INP\n-A FORWARD -j LIBVIRT_FWX\n-A FORWARD -j LIBVIRT_FWI\n-A FORWARD -j LIBVIRT_FWO\n-A OUTPUT -j LIBVIRT_OUT\n")))}k.isMDXComponent=!0}}]);