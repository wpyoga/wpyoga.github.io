"use strict";(self.webpackChunkwpyoga_docusaurus_blog=self.webpackChunkwpyoga_docusaurus_blog||[]).push([[2778],{3905:function(n,e,t){t.d(e,{Zo:function(){return d},kt:function(){return c}});var i=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function r(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},l=Object.keys(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=i.createContext({}),m=function(n){var e=i.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},d=function(n){var e=m(n.components);return i.createElement(s.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},p=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,l=n.originalType,s=n.parentName,d=r(n,["components","mdxType","originalType","parentName"]),p=m(t),c=a,h=p["".concat(s,".").concat(c)]||p[c]||u[c]||l;return t?i.createElement(h,o(o({ref:e},d),{},{components:t})):i.createElement(h,o({ref:e},d))}));function c(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var l=t.length,o=new Array(l);o[0]=p;var r={};for(var s in e)hasOwnProperty.call(e,s)&&(r[s]=e[s]);r.originalType=n,r.mdxType="string"==typeof n?n:a,o[1]=r;for(var m=2;m<l;m++)o[m]=t[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8752:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return m},assets:function(){return d},toc:function(){return u},default:function(){return c}});var i=t(3117),a=t(102),l=(t(7294),t(3905)),o=["components"],r={title:"Fast Loading for `nvm` and SDKMAN!",tags:["bash","shell","nvm","sdkman","slow"]},s=void 0,m={permalink:"/blog/2021/07/21/nvm-sdkman-fast-loading",editUrl:"https://github.com/wpyoga/wpyoga.github.io/edit/master/blog/2021-07-21-nvm-sdkman-fast-loading.md",source:"@site/blog/2021-07-21-nvm-sdkman-fast-loading.md",title:"Fast Loading for `nvm` and SDKMAN!",description:"Some time ago I was trying to make bash start faster. There, I described a solution to load nvm and SDKMAN! faster. However, that solution has a few issues.",date:"2021-07-21T00:00:00.000Z",formattedDate:"July 21, 2021",tags:[{label:"bash",permalink:"/blog/tags/bash"},{label:"shell",permalink:"/blog/tags/shell"},{label:"nvm",permalink:"/blog/tags/nvm"},{label:"sdkman",permalink:"/blog/tags/sdkman"},{label:"slow",permalink:"/blog/tags/slow"}],truncated:!0,authors:[],prevItem:{title:"Vue.js Component vs HTML Tag Names",permalink:"/blog/2021/10/15/vue-component-tag-name"},nextItem:{title:"Bash Shell Slow Start-up",permalink:"/blog/2021/07/11/bash-slow-start"}},d={authorsImageUrls:[]},u=[{value:"The solution",id:"the-solution",children:[],level:2},{value:"Loading time",id:"loading-time",children:[],level:2},{value:"Testing",id:"testing",children:[],level:2},{value:"Shortcomings",id:"shortcomings",children:[],level:2},{value:"What about SDKMAN! ?",id:"what-about-sdkman-",children:[],level:2}],p={toc:u};function c(n){var e=n.components,t=(0,a.Z)(n,o);return(0,l.kt)("wrapper",(0,i.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Some time ago I was trying to ",(0,l.kt)("a",{parentName:"p",href:"/blog/2021/07/10/bashrc-directory#self-cleaning-implementation"},"make bash start faster"),". There, I described a solution to load ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm")," and SDKMAN! faster. However, that solution has a few issues."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"we always need to call one of ",(0,l.kt)("inlineCode",{parentName:"li"},"nvm"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"node"),", or ",(0,l.kt)("inlineCode",{parentName:"li"},"npm")," before we can call any other node.js-related command"),(0,l.kt)("li",{parentName:"ul"},"we can avoid the previous problem by manually adding them to ",(0,l.kt)("inlineCode",{parentName:"li"},"50-nvm.bashrc"),", but this is error-prone and cumbersome"),(0,l.kt)("li",{parentName:"ul"},"when we add a new utility, we need to manually add them to the list, and to every function there"),(0,l.kt)("li",{parentName:"ul"},"if we switch the default node.js version, then we need to re-evaluate the whole script. for example, our node.js 12 installation has ",(0,l.kt)("inlineCode",{parentName:"li"},"yarn")," installed, but our node.js 14 installation doesn't have it installed. we would then need to remove ",(0,l.kt)("inlineCode",{parentName:"li"},"yarn")," from the bashrc script")),(0,l.kt)("p",null,"To solve this, we need something that:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"can automatically find the currently-used node version"),(0,l.kt)("li",{parentName:"ul"},"can autogenerate the list and the functions, according to which utilities are installed")),(0,l.kt)("h2",{id:"the-solution"},"The solution"),(0,l.kt)("p",null,"After some thinking and experimentation, I have come up with a new solution:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title=".bashrc.d/50-nvm.bashrc"',title:'".bashrc.d/50-nvm.bashrc"'},'_DEFAULT=\n# read the first line only\n[ -s "${HOME}/.nvm/alias/default" ] && read -r _DEFAULT <"${HOME}/.nvm/alias/default"\n\nif [ -n "${_DEFAULT}" ]; then\n  # this will simplify the checks below\n  _DEFAULT=${_DEFAULT#v}\n  _DEFAULT=${_DEFAULT%.}\n\n  if [ -d "${HOME}/.nvm/versions/node/v${_DEFAULT}/bin" ]; then\n    _DEFAULT_DIR="${HOME}/.nvm/versions/node/v${_DEFAULT}/bin"\n  elif [ -d "${HOME}/.nvm/versions/node/v${_DEFAULT}".*/bin ]; then\n    _DEFAULT_DIR="$(echo "${HOME}/.nvm/versions/node/v${_DEFAULT}".*/bin)"\n  else\n    _DEFAULT_DIR=\n  fi\n\n  _NVM_BIN_LIST=\n  if [ -n "${_DEFAULT_DIR}" ]; then\n    for _EXEC in "${_DEFAULT_DIR}"/*; do\n      if [ -x "${_EXEC}" ]; then\n        _CMD="${_EXEC##*/}"\n        eval "${_CMD}"\'() { _nvm_load; \'"${_CMD}"\' "$@"; }\'\n        _NVM_BIN_LIST="${_NVM_BIN_LIST} ${_CMD}"\n      fi\n    done\n  fi\nfi\n\n_CMD=\'nvm\'\neval "${_CMD}"\'() { _nvm_load; \'"${_CMD}"\' "$@"; }\'\n\neval \'_nvm_load() {\n  unset -f _nvm_load nvm \'"${_NVM_BIN_LIST}"\'\n  export NVM_DIR="${HOME}/.nvm"\n  [ -s "${NVM_DIR}/nvm.sh" ] && . "${NVM_DIR}/nvm.sh"\n  [ -s "${NVM_DIR}/bash_completion" ] && . "${NVM_DIR}/bash_completion"\n}\'\n\nunset _CMD _NVM_BIN_LIST _EXEC _DEFAULT_DIR _DEFAULT\n')),(0,l.kt)("p",null,"When the script is sourced in by ",(0,l.kt)("inlineCode",{parentName:"p"},".bashrc"),", it will first try to read the default version. This is usually read in as something like ",(0,l.kt)("inlineCode",{parentName:"p"},"12")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"12.22"),". With that version information, it tries to find the corresponding nvm directory and list all the executables there. For each executable, a placeholder shell function is created. When we first call the placeholder, it will initialize ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm"),", after which everything will return to normal."),(0,l.kt)("p",null,"This is the environment on my laptop:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell-session"},'william@william-ThinkPad-T450s: ~$ cat .nvm/alias/default\n12\nwilliam@william-ThinkPad-T450s: ~$ ls -l .nvm/versions/node/v12*/bin/*\n-rwxr-xr-x 1 william william 48928552 Apr  6 22:06 .nvm/versions/node/v12.22.1/bin/node\nlrwxrwxrwx 1 william william       42 May 17 13:12 .nvm/versions/node/v12.22.1/bin/nodemon -> ../lib/node_modules/nodemon/bin/nodemon.js\nlrwxrwxrwx 1 william william       38 Jun 21 01:34 .nvm/versions/node/v12.22.1/bin/npm -> ../lib/node_modules/npm/bin/npm-cli.js\nlrwxrwxrwx 1 william william       38 Jun 21 01:34 .nvm/versions/node/v12.22.1/bin/npx -> ../lib/node_modules/npm/bin/npx-cli.js\nlrwxrwxrwx 1 william william       36 Jun 10 22:51 .nvm/versions/node/v12.22.1/bin/yarn -> ../lib/node_modules/yarn/bin/yarn.js\nlrwxrwxrwx 1 william william       36 Jun 10 22:51 .nvm/versions/node/v12.22.1/bin/yarnpkg -> ../lib/node_modules/yarn/bin/yarn.js\nlrwxrwxrwx 1 william william       33 May 27 20:20 .nvm/versions/node/v12.22.1/bin/yo -> ../lib/node_modules/yo/lib/cli.js\nlrwxrwxrwx 1 william william       46 May 27 20:20 .nvm/versions/node/v12.22.1/bin/yo-complete -> ../lib/node_modules/yo/lib/completion/index.js\nwilliam@william-ThinkPad-T450s: ~$ type _nvm_load nvm node npm yarn\n_nvm_load is a function\n_nvm_load () \n{ \n    unset -f _nvm_load nvm node nodemon npm npx yarn yarnpkg yo yo-complete;\n    export NVM_DIR="${HOME}/.nvm";\n    [ -s "${NVM_DIR}/nvm.sh" ] && . "${NVM_DIR}/nvm.sh";\n    [ -s "${NVM_DIR}/bash_completion" ] && . "${NVM_DIR}/bash_completion"\n}\nnvm is a function\nnvm () \n{ \n    _nvm_load;\n    nvm "$@"\n}\nnode is a function\nnode () \n{ \n    _nvm_load;\n    node "$@"\n}\nnpm is a function\nnpm () \n{ \n    _nvm_load;\n    npm "$@"\n}\nyarn is a function\nyarn () \n{ \n    _nvm_load;\n    yarn "$@"\n}\n')),(0,l.kt)("p",null,"The placeholder function for ",(0,l.kt)("inlineCode",{parentName:"p"},"yo")," is there, I just didn't show it."),(0,l.kt)("h2",{id:"loading-time"},"Loading time"),(0,l.kt)("p",null,"Loading time is still fast enough:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ time . .bashrc.d/50-nvm.bashrc \n\nreal    0m0.002s\nuser    0m0.001s\nsys 0m0.001s\n")),(0,l.kt)("h2",{id:"testing"},"Testing"),(0,l.kt)("p",null,"With this loading script, ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm")," still functions correctly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ yarn --version\n1.22.10\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ node --version\nv12.22.1\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ nvm --version\n0.38.0\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ npm --version\n7.18.1\n")),(0,l.kt)("p",null,"Also, it still respects ",(0,l.kt)("inlineCode",{parentName:"p"},".nvmrc")," as described ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/nvm-sh/nvm#nvmrc"},"here"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell-session"},"william@william-ThinkPad-T450s: ~$ mkdir test\nwilliam@william-ThinkPad-T450s: ~$ echo 14 >test/.nvmrc\nwilliam@william-ThinkPad-T450s: ~$ mkdir test/foo\nwilliam@william-ThinkPad-T450s: ~$ cd test/foo\nwilliam@william-ThinkPad-T450s: ~/test/foo$ nvm use\nFound '/home/william/test/.nvmrc' with version <14>\nNow using node v14.17.1 (npm v7.19.0)\nwilliam@william-ThinkPad-T450s: ~/test/foo$ cd ..\nwilliam@william-ThinkPad-T450s: ~/test$ nvm use\nFound '/home/william/test/.nvmrc' with version <14>\nNow using node v14.17.1 (npm v7.19.0)\nwilliam@william-ThinkPad-T450s: ~/test$ cd ..\nwilliam@william-ThinkPad-T450s: ~$ nvm use\nNo .nvmrc file found\nPlease see `nvm --help` or https://github.com/nvm-sh/nvm#nvmrc for more information.\n")),(0,l.kt)("h2",{id:"shortcomings"},"Shortcomings"),(0,l.kt)("p",null,"Of course, no solution is perfect. Otherwise the ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm")," developers would have adopted it as their official solution/workaround to the slow loading times of ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm"),". However, there is currently one way that I can think of, to make this solution fail: install a new utility in another terminal session."),(0,l.kt)("p",null,"In this scenario, we first open a terminal window, but don't call any ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm")," or node.js-related command. Let's say we don't have ",(0,l.kt)("inlineCode",{parentName:"p"},"yarn")," installed at this point. Then in another terminal window, we install ",(0,l.kt)("inlineCode",{parentName:"p"},"yarn"),". Now, in the first terminal window, we cannot execute ",(0,l.kt)("inlineCode",{parentName:"p"},"yarn")," without first calling ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm")," or any other existing commands."),(0,l.kt)("p",null,"The reverse is not a problem. Let's say we have ",(0,l.kt)("inlineCode",{parentName:"p"},"yo")," installed. If we uninstall ",(0,l.kt)("inlineCode",{parentName:"p"},"yo")," in the other terminal window, when we try to execute it in the first terminal window, it will just fail. This is the exact same behaviour as a vanilla ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm")," installation."),(0,l.kt)("p",null,"Please let me know if you have any other potential pitfalls and shortcomings"),(0,l.kt)("h2",{id:"what-about-sdkman-"},"What about SDKMAN! ?"),(0,l.kt)("p",null,"Well, SDKMAN! is a bit simpler than ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title=".bashrc.d/50-sdkman.bashrc"',title:'".bashrc.d/50-sdkman.bashrc"'},'_SDK_BIN_LIST=\nfor _EXEC in "${HOME}/.sdkman/candidates"/*/current/bin/*; do\n  if [ -x "${_EXEC}" ]; then\n    _CMD="${_EXEC##*/}"\n    eval "${_CMD}"\'() { _sdk_load; \'"${_CMD}"\' "$@"; }\'\n    _SDK_BIN_LIST="${_SDK_BIN_LIST} ${_CMD}"\n  fi\ndone\n\n_CMD=\'sdk\'\neval "${_CMD}"\'() { _sdk_load; \'"${_CMD}"\' "$@"; }\'\n\neval \'_sdk_load() {\n  unset -f _sdk_load sdk \'"${_SDK_BIN_LIST}"\'\n  export SDKMAN_DIR="${HOME}/.sdkman"\n  [ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ] && . "${SDKMAN_DIR}/bin/sdkman-init.sh"\n}\'\n\nunset _CMD _SDK_BIN_LIST _EXEC\n')),(0,l.kt)("p",null,"Since SDKMAN! uses a ",(0,l.kt)("inlineCode",{parentName:"p"},"current")," symlink for each installed candidate, we can just use this. No need to manually figure out the currently-used version."),(0,l.kt)("p",null,"The solution for SDKMAN! suffers the same shortcoming as the one for ",(0,l.kt)("inlineCode",{parentName:"p"},"nvm"),", so please also let me know if you find something wrong with it."))}c.isMDXComponent=!0}}]);